{"version":3,"file":"/index.js","mappings":"gbAAA,MAIMA,EAAM,IAJZ,OAIgBC,KAAI,CAAEC,WAAY,eAGrB,EAAAC,QAA6BC,GAAoB,OAAD,6BACzD,MAAMC,EAAUD,EAAME,QAEhBC,EAAe,CAAC,QAAS,SAAU,SAAU,aAAc,UAC3DC,EAAW,GACjBH,EAAQI,SAAQC,IAEZ,IACIC,KAAKC,MAAMF,EAAOG,MACpB,SAOE,OANAC,QAAQC,IAAI,UACZD,QAAQC,IAAI,mCACK,CACTC,WAAY,IACZH,KAAMF,KAAKM,UAAU,iBAKjC,MAAMC,EAAUP,KAAKC,MAAMF,EAAOG,MAE5BM,EAAYD,EAAQC,UAEpBC,EAAaF,EAAQE,WAG3B,QAA0B,IAAfA,GAA6C,cAAdD,EAOtC,OANAL,QAAQC,IAAI,UACZD,QAAQC,IAAI,kCACK,CACTC,WAAY,IACZH,KAAMF,KAAKM,UAAU,iBAMjC,IAAII,EAAoB,IAAIC,IAGxBC,GAAkB,EAEtB,IAAK,MAAMC,KAAiBJ,EAAY,CACpC,IAAIK,EAAsBL,EAAWI,GAAeE,cACpDnB,EAAaE,SAAQkB,IACbF,EAAoBG,SAASD,KAE7BN,EAAkBQ,IAAIF,GACtBJ,GAAkB,MAK9B,GAAIA,EAAgB,CAEhB,MAAMO,EAAgB,CAClBX,UAAWA,EACXZ,aAAcwB,MAAMC,KAAKX,IAE7BP,QAAQC,IAAIJ,KAAKM,UAAUa,IAG3B,MAAMG,EAAS,CACXC,QAASvB,KAAKM,UAAUa,GACxBK,SAAUC,QAAQC,IAAIC,QAIpBC,EAAWvC,EAAIwC,QAAQP,GAG7BzB,EAASiC,KAAKF,EAASG,qBAMzBC,QAAQC,IAAIpC,O,QCpFtBqC,EAAOC,QAAUC,QAAQ,aCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,IAOV,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,QClBWI,CAAoB,K","sources":["webpack://todo-package-name/./src/index.ts","webpack://todo-package-name/external commonjs2 \"aws-sdk\"","webpack://todo-package-name/webpack/bootstrap","webpack://todo-package-name/webpack/startup"],"sourcesContent":["import { SNS } from \"aws-sdk\";\nimport { SQSEvent } from 'aws-lambda/trigger/sqs';\nimport {SQSHandler} from 'aws-lambda';\n\nconst sns = new SNS({ apiVersion: '2010-03-31' });\n\n\nexport const handler: SQSHandler = async (event: SQSEvent) => {\n    const records = event.Records;\n    // define flagged words\n    const flaggedWords = [\"apple\", \"banana\", \"orange\", \"strawberry\", \"cherry\"];\n    const promises = [];\n    records.forEach(record => {\n        // Check the SQS Message in JSON format\n        try{\n            JSON.parse(record.body);\n        } catch{\n            console.log(\"error!\");\n            console.log(\"Please check the request format\");\n            const err_text = {\n                    statusCode: 400,\n                    body: JSON.stringify('Bad Request!'),\n             };\n            return err_text;\n        }\n        // Get the SQS Message \n        const message = JSON.parse(record.body);\n        // Get the productID\n        const productID = message.productID;\n        // Get the Text Fields\n        const textFields = message.textFields;\n        \n        // Mandatory fields if they don't exist then return as nothing else to do\n        if (typeof textFields === 'undefined' ||  productID === 'undefined') {\n            console.log(\"error!\");\n            console.log(\"Please check the request forma\");\n            const err_text = {\n                    statusCode: 400,\n                    body: JSON.stringify('Bad Request!'),\n             };\n            return err_text;\n        }\n        \n        // Create Set to store the flagged words\n        let flaggedWordsFound = new Set();\n        \n        // Flag to determine is any flagged word exist in the message\n        let flaggedWordFlag = false;\n        \n        for (const textField_key in textFields) {\n            let textFieldsLowerCase = textFields[textField_key].toLowerCase();\n            flaggedWords.forEach(flaggedWord => {\n                if (textFieldsLowerCase.includes(flaggedWord)) {\n                    // Flagged Word Found\n                    flaggedWordsFound.add(flaggedWord);\n                    flaggedWordFlag = true;\n                }\n            });\n        }\n        \n        if (flaggedWordFlag){\n            // Create the message to be send back\n            const response_text = {\n                productID: productID,\n                flaggedWords: Array.from(flaggedWordsFound)\n            };\n            console.log(JSON.stringify(response_text));\n            \n            // Create the JSON parameters which are required\n            const params = {\n                Message: JSON.stringify(response_text),\n                TopicArn: process.env.snsARN\n            };\n            \n            // Publish the message to SNS\n            const response = sns.publish(params);\n            \n            \n            promises.push(response.promise());\n            \n        }\n        \n    }) \n    // Wait until the message is publis to the SNS\n    await Promise.all(promises);\n};\n","module.exports = require(\"aws-sdk\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["sns","SNS","apiVersion","handler","event","records","Records","flaggedWords","promises","forEach","record","JSON","parse","body","console","log","statusCode","stringify","message","productID","textFields","flaggedWordsFound","Set","flaggedWordFlag","textField_key","textFieldsLowerCase","toLowerCase","flaggedWord","includes","add","response_text","Array","from","params","Message","TopicArn","process","env","snsARN","response","publish","push","promise","Promise","all","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}